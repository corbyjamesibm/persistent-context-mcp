apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: neo4j
  namespace: context-store
  labels:
    app: neo4j
    component: database
spec:
  serviceName: neo4j-headless
  replicas: 1
  selector:
    matchLabels:
      app: neo4j
      component: database
  template:
    metadata:
      labels:
        app: neo4j
        component: database
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: "/metrics"
        prometheus.io/port: "2004"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 7474
        runAsGroup: 7474
        fsGroup: 7474
      containers:
      - name: neo4j
        image: neo4j:5.15-community
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 7474
          name: http
        - containerPort: 7687
          name: bolt
        - containerPort: 2004
          name: metrics
        env:
        - name: NEO4J_AUTH
          valueFrom:
            secretKeyRef:
              name: context-store-secrets
              key: NEO4J_USERNAME
        - name: NEO4J_PLUGINS
          value: '["apoc"]'
        - name: NEO4J_dbms_security_procedures_unrestricted
          value: "apoc.*"
        - name: NEO4J_dbms_memory_heap_initial__size
          value: "1G"
        - name: NEO4J_dbms_memory_heap_max__size
          value: "2G"
        - name: NEO4J_dbms_memory_pagecache_size
          value: "1G"
        - name: NEO4J_dbms_tx__log_rotation_retention__policy
          value: "7 days"
        - name: NEO4J_dbms_logs_query_enabled
          value: "INFO"
        - name: NEO4J_metrics_enabled
          value: "true"
        - name: NEO4J_metrics_prometheus_enabled
          value: "true"
        - name: NEO4J_metrics_prometheus_endpoint
          value: "0.0.0.0:2004"
        - name: NEO4J_dbms_default__listen__address
          value: "0.0.0.0"
        - name: NEO4J_dbms_connector_bolt_listen__address
          value: "0.0.0.0:7687"
        - name: NEO4J_dbms_connector_http_listen__address
          value: "0.0.0.0:7474"
        
        resources:
          requests:
            memory: "2Gi"
            cpu: "500m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
        
        volumeMounts:
        - name: data
          mountPath: /data
        - name: logs
          mountPath: /logs
        - name: import
          mountPath: /var/lib/neo4j/import
        - name: plugins
          mountPath: /plugins
        - name: conf
          mountPath: /var/lib/neo4j/conf
        
        livenessProbe:
          httpGet:
            path: /
            port: 7474
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /
            port: 7474
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        
        startupProbe:
          httpGet:
            path: /
            port: 7474
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 10
          failureThreshold: 30
        
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
      
      volumes:
      - name: conf
        emptyDir: {}
      - name: plugins
        emptyDir: {}
      - name: import
        emptyDir: {}
      
      initContainers:
      - name: init-plugins
        image: neo4j:5.15-community
        command:
        - sh
        - -c
        - |
          echo "Downloading APOC plugin..."
          wget -O /plugins/apoc-5.15.0-core.jar https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/download/5.15.0/apoc-5.15.0-core.jar
          chmod 644 /plugins/apoc-5.15.0-core.jar
          echo "Plugin downloaded successfully"
        volumeMounts:
        - name: plugins
          mountPath: /plugins
        securityContext:
          runAsUser: 7474
          runAsGroup: 7474
      
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - neo4j
            topologyKey: kubernetes.io/hostname
  
  volumeClaimTemplates:
  - metadata:
      name: data
      labels:
        app: neo4j
        component: database
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: fast-ssd
      resources:
        requests:
          storage: 100Gi
  
  - metadata:
      name: logs
      labels:
        app: neo4j
        component: database
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: standard
      resources:
        requests:
          storage: 10Gi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: context-store
  labels:
    app: redis
    component: cache
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
      component: cache
  template:
    metadata:
      labels:
        app: redis
        component: cache
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      containers:
      - name: redis
        image: redis:7-alpine
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 6379
          name: redis
        command:
        - redis-server
        - --appendonly
        - "yes"
        - --appendfsync
        - everysec
        - --maxmemory
        - 512mb
        - --maxmemory-policy
        - allkeys-lru
        - --save
        - "900 1"
        - --save
        - "300 10"
        - --save
        - "60 10000"
        
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        
        volumeMounts:
        - name: redis-data
          mountPath: /data
        
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 1
          failureThreshold: 3
        
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      
      volumes:
      - name: redis-data
        persistentVolumeClaim:
          claimName: redis-pvc

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: context-store
  labels:
    app: redis
    component: cache
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: standard